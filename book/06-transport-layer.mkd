Transportschicht
===============
\index{Transportschicht}
\index{Layer!Transport}
\index{TCP}

Die nächste Schicht über der Internetworking-Schicht ist die Transport-Schicht.
Ein Schlüsselelement der Internetworking-Schicht ist, dass sie nicht versucht, die Zustellung eines bestimmten Pakets zu garantieren.   Die Internetworking-Schicht ist nahezu perfekt, aber manchmal können Pakete verloren gehen oder falsch weitergeleitet werden.

![Die Transportschicht](../images/layers-transport)

Die Benutzer des Netzwerks wollen aber zuverlässig ganze Dateien oder Nachrichten über das Internet versenden. Ein Netzwerk nützt uns nicht viel, wenn es nur Pakete senden kann, die die meiste Zeit über empfangen werden. Damit das Netzwerk nützlich ist, müssen alle Pakete wieder in der richtigen Reihenfolge zusammengesetzt werden, um die Nachricht auf dem Empfangssystem zu rekonstruieren. Das Netzwerk muss auch mit Paketen umgehen, die nicht in der richtigen Reihenfolge oder überhaupt nicht ankommen. Auf der Transportschicht werden die Zuverlässigkeit und die Rekonstruktion der Nachricht auf dem Zielcomputer behandelt.

Genau wie die IP-Schicht fügt die Transportschicht jedem Paket eine kleine Menge an Daten hinzu, um die Probleme des Zusammensetzens und der erneuten Übertragung von Paketen zu lösen.

Paket-Kopfzeilen
--------------

Wenn Sie ein Paket betrachten, das über eine der vielen Verbindungen zwischen Quell- und Zielcomputer läuft, sehen Sie einen Link-Header, einen IP-Header und einen Transport Control Protocol (TCP)-Header sowie die eigentlichen Daten im Paket.

![Header und Daten](../images/headers)

Der Link-Header wird entfernt, wenn das Paket auf einer Verbindung empfangen wird, und ein neuer Link-Header wird hinzugefügt, wenn das Paket auf der nächsten Verbindung auf seine Reise geschickt wird. Die IP- und TCP-Header verbleiben bei einem Paket, während es auf seiner Reise über jede Verbindung geht. Denken Sie daran, dass ein Paket auf seinem Weg durch das Internet mehrere Arten von Verbindungsschichten durchlaufen kann.

Der IP-Header enthält die Quell- und Ziel-IP-Adressen (Internet Protocol) sowie die Time to Live (TTL) für das Paket. Der IP-Header wird auf dem Quellcomputer gesetzt und bleibt (abgesehen von der TTL) unverändert, während das Paket auf seiner Reise durch die verschiedenen Router läuft.

Die TCP-Header geben an, wohin die Daten in jedem Paket gehören. Wenn der Quellcomputer die Nachricht oder Datei in Pakete aufteilt, verfolgt er die Position jedes Pakets relativ zum Anfang der Nachricht oder Datei und platziert den Offset in jedem Paket, das erstellt und gesendet wird.

Wiederzusammensetzung und erneute Übertragung von Paketen
------------------------------------

Wenn der Zielcomputer die Pakete empfängt, schaut er auf die Offset-Position vom Anfang der Nachricht, damit er das Paket an die richtige Stelle in der neu zusammengesetzten Nachricht setzen kann. Indem die Transportschicht einfach sicherstellt, dass die Paketdaten an der richtigen Position relativ zum Anfang der Nachricht eingefügt werden, kann sie problemlos mit Paketen umgehen, die nicht in der richtigen Reihenfolge ankommen.  Wenn sie ein Paket weiter unten in der Nachricht empfängt, legt sie dieses Paket in einem Puffer ab, wobei sie berücksichtigt, dass nun eine Lücke in der Nachricht besteht, die rekonstruiert wird. Wenn das frühere Paket einen Moment später eintrifft, passt es perfekt in die Lücke in den neu zusammengesetzten Daten.

\index der Fenstergröße
Um das Netzwerk nicht zu überlasten, sendet die Transportschicht im Sendecomputer nur eine bestimmte Datenmenge, bevor sie auf eine Bestätigung der Transportschicht auf dem Zielcomputer wartet, dass die Pakete empfangen wurden. Die Datenmenge, die der sendende Computer sendet, bevor er eine Pause einlegt, um auf eine Bestätigung zu warten, wird als "Fenstergröße" bezeichnet.

Der sendende Computer behält im Auge, wie schnell er Bestätigungen vom empfangenden Computer erhält. Wenn die Bestätigungen schnell zurückkommen, vergrößert der sendende Computer seine Fenstergröße, aber wenn die Bestätigungen langsam zurückkommen, überträgt der sendende Computer weniger Daten. Durch Anpassen der Fenstergröße können sendende Computer große Datenmengen schnell über schnelle Verbindungen mit geringer Last senden. Wenn sie Daten über langsame oder stark belastete Verbindungen senden, können sie die Daten so senden, dass das Netzwerk nicht überlastet wird.

Wenn ein Paket verloren geht, wird es nie beim Zielcomputer ankommen, und der Zielcomputer wird daher nie eine Bestätigung für diese Daten senden. Da der sendende Computer keine Bestätigung erhält, erreicht er schnell den Punkt, an dem er genug unbestätigte Daten gesendet hat, um das Fenster zu füllen und hört auf, neue Pakete zu senden.

An diesem Punkt warten beide Computer. Der sendende Computer wartet auf eine Bestätigung für ein verlorenes Paket, die nie kommen wird, und der empfangende Computer wartet auf ein verlorenes Paket, das nie kommen wird. Um sicherzustellen, dass die Computer nicht ewig warten, verfolgt der Zielcomputer, wie viel Zeit seit dem Empfang des letzten Datenpakets vergangen ist. Irgendwann entscheidet der empfangende Computer, dass zu viel Zeit vergangen ist, und sendet ein Paket an den sendenden Computer, das angibt, an welcher Stelle im Datenstrom der empfangende Computer zuletzt Daten empfangen hat. Wenn der sendende Computer diese Nachricht erhält, "fährt er zurück"
und sendet erneut Daten von der letzten Position, die der Empfangsrechner erfolgreich empfangen hatte.

![Warten auf ein verlorenes Paket](../sketchnote/Transport)

Die Kombination aus dem Bestätigen empfangener Daten durch den empfangenden Computer, dem Verhindern eines zu großen Vorsprungs des sendenden Computers (Fenstergröße) und der Aufforderung des empfangenden Computers an den sendenden Computer, "zurückzuspringen und neu zu starten"
wenn es den Anschein hat, dass Daten verloren gegangen sind, schafft eine relativ einfache Methode, um große Nachrichten oder Dateien zuverlässig über ein Netzwerk zu senden.

Während die Transportschicht einen Datenstrom sendet, überwacht sie kontinuierlich, wie schnell sie Bestätigungen erhält und passt ihre Fenstergröße dynamisch an. Dadurch wird sichergestellt, dass die Daten schnell gesendet werden, wenn die Verbindung zwischen zwei Computern schnell ist, und viel langsamer, wenn die Verbindung langsame Verbindungen hat oder
einer hohen Last.

Die Transportschicht im Einsatz
--------------------------------

Eines der Schlüsselelemente der Transportschicht ist, dass der sendende Computer alle Daten, die er sendet, solange aufbewahren muss, bis die Daten bestätigt wurden. Sobald der empfangende Computer die Daten quittiert hat, kann der sendende Computer die gesendeten Daten verwerfen.  Wir können uns dies grafisch ansehen, wenn eine Nachricht in viele Pakete aufgeteilt wird. Hier wurden die ersten zehn Pakete der Nachricht gesendet und vom Zielcomputer ("a") quittiert. Der sendende Computer hat sechs weitere Pakete gesendet ('S') und dann aufgehört, weil er seine Fenstergröße erreicht hat.

![Pufferung in der Transportschicht](../images/transport-buffer)

Es gibt drei Pakete, die gesendet, aber noch nicht empfangen wurden ("S").  Da es viele Hops im Netzwerk gibt, ist es sehr häufig, dass mehr als ein Paket gleichzeitig im Netzwerk unterwegs ist.

Die Transportschicht auf dem empfangenden Computer hat zehn Pakete empfangen, bestätigt und an die empfangende Anwendung ("a") geliefert.^[Über die Anwendungsschicht sprechen wir später.] Die Transportschicht auf dem Zielcomputer hat drei weitere Pakete empfangen ("R"), aber ein Paket ist außer der Reihe. Der Empfang eines Pakets in falscher Reihenfolge ist kein Grund zur Besorgnis, wenn das fehlende Paket in einer angemessen kurzen Zeitspanne eintrifft. Solange alle Pakete empfangen werden, wird die empfangende Transportschicht die Nachricht rekonstruieren, indem sie die Pakete wie Puzzleteile zusammenfügt, und sie an die empfangende Anwendung ausliefern.

Anwendungs-Clients und -Server
-------------------------------

\index{client}
\index{server}
Der Zweck der Transportschicht ist es, zuverlässige Verbindungen zwischen vernetzten Anwendungen bereitzustellen, damit diese Anwendungen Datenströme senden und empfangen können. Für eine Anwendung ist dies so einfach wie die Aufforderung an die Transportschicht, eine Verbindung zu einer Anwendung herzustellen, die auf einem entfernten Host läuft. Wir nennen die Anwendung, die die Verbindung auf dem lokalen Computer initiiert, den
"Client" und die Anwendung, die auf die Verbindungsanfrage antwortet, als
"Server". Wir nennen die Kombination der beiden vernetzten Anwendungen an den Enden der Verbindung eine "Client/Server"-Anwendung, weil die beiden Teile der Anwendung zusammenarbeiten müssen.

In die unteren drei Schichten unserer Architektur ist eine Menge Technik eingeflossen, um das Öffnen einer Verbindung zu einem entfernten Computer und das Senden und Empfangen von Daten über diese Verbindung zu erleichtern.

Serveranwendungen und Ports
-----------------------------

Wenn eine Client-Anwendung eine Verbindung zu einem entfernten Computer herstellen möchte, ist es wichtig, dass die Verbindung mit der richtigen Server-Anwendung auf diesem entfernten Computer hergestellt wird.  Auf einem Remote-Computer kann eine beliebige Anzahl verschiedener Serveranwendungen gleichzeitig ausgeführt werden. Beispiele für Serveranwendungen sind:

* Web-Server
* Video-Server
* Mail-Server

![TCP-Ports](../sketchnote/Ports)

Ein Web-Client (ein Browser) muss sich beispielsweise mit dem Webserver verbinden, der auf dem entfernten Computer läuft. Eine Client-Anwendung muss also nicht nur wissen, mit welchem entfernten Computer sie sich verbinden soll, sondern sie muss auch eine bestimmte Anwendung auswählen, mit der sie auf diesem entfernten Computer interagieren möchte.

Wir verwenden ein Konzept namens "Ports", damit eine Client-Anwendung auswählen kann, mit welcher Server-Anwendung sie interagieren möchte. Ports sind wie Telefondurchwahlen. Alle Nebenstellen haben die gleiche Telefonnummer (IP-Adresse), aber jede Nebenstelle (Serveranwendung) hat eine andere Nebenstellennummer (Portnummer).

Wenn eine Serveranwendung gestartet wird, "lauscht" sie auf eingehende Verbindungen am angegebenen Port. Sobald die Serveranwendung registriert hat, dass sie bereit ist, eingehende Verbindungen zu empfangen, wartet sie, bis die erste Verbindung hergestellt wird.

Damit Client-Anwendungen wissen, mit welchem Port sie sich verbinden sollen, gibt es eine Liste mit bekannten Standard-Ports für verschiedene Server-Anwendungen:

* Telnet (23) - Anmeldung
* SSH (22) - Sichere Anmeldung
* HTTP (80) - World Wide Web
* HTTPS (443) - Sicheres Web
* SMTP (25) - Posteingang
* IMAP (143/220/993) - Mail-Abruf
* POP (109/110) - Mail-Abruf
* DNS (53) - Auflösung von Domänennamen
* FTP (21) - Dateiübertragung

Dies sind die normalen Ports für diese Anwendungen.  Manchmal stellen Server Anwendungen an nicht standardmäßigen Ports zur Verfügung.  Wenn Sie Web-Entwicklung betreiben, kann es sein, dass Sie einen Webserver an einem Nicht-Standard-Port wie 3000, 8080 oder 8888 laufen lassen.  Wenn Sie
eine URL wie:

	http://testing.example.com:8080/login

sehen, deutet das "8080" darauf hin, dass Ihr Browser die Webprotokolle zur Interaktion mit dem Server verwendet, aber eine Verbindung zum Port 8080 anstelle des Standardports 80 herstellt.

Zusammenfassung
-------

In gewisser Weise besteht der Zweck der Transportschicht darin, die Tatsache zu kompensieren, dass die Verbindungs- und die Internetworking-Schicht Daten verlieren können. Wenn die beiden unteren Schichten Pakete verlieren oder umleiten, arbeitet die Transportschicht daran, diese Daten wieder zusammenzusetzen und/oder erneut zu übertragen. Das Vorhandensein der Transportschicht macht es möglich, dass die beiden unteren Schichten Probleme mit der erneuten Übertragung und der Ratenbegrenzung ignorieren können.

Ein Teil des Ziels einer Schichtenarchitektur besteht darin, ein übermäßig komplexes Problem in kleinere Teilprobleme zu zerlegen. Jede Schicht konzentriert sich auf die Lösung eines Teils des Gesamtproblems und geht davon aus, dass die anderen Schichten die Probleme lösen, die sie lösen sollen.

Glossar
--------

**Bestätigung**: Wenn der empfangende Computer eine Benachrichtigung an den Quellcomputer zurücksendet, die anzeigt, dass Daten empfangen worden sind.

**Puffern**: Das vorübergehende Festhalten von gesendeten oder empfangenen Daten, bis der Computer sicher ist, dass die Daten nicht mehr benötigt werden.

**Listen**: Wenn eine Serveranwendung gestartet und bereit ist, eingehende Verbindungen von Client-Anwendungen anzunehmen.

**Port**: Eine Möglichkeit, vielen verschiedenen Serveranwendungen zu erlauben, auf einem einzigen Computer auf eingehende Verbindungen zu warten. Jede Anwendung lauscht auf
einem anderen Port. Client-Anwendungen stellen Verbindungen zu bekannten Portnummern her, um sicherzustellen, dass sie mit der richtigen Server-Anwendung sprechen.



Fragen
---------

Sie können dieses Quiz online unter http://www.net-intro.com/quiz/ bearbeiten.

1. Was ist das Hauptproblem, das die Transportschicht (TCP) lösen soll?
a) Pakete über mehrere Sprünge von einem Quell- zu einem Zielcomputer zu bewegen
b) Pakete über eine einzige physikalische Verbindung zu transportieren
c) Umgang mit verlorenen und nicht ordnungsgemäßen Paketen
d) Verschlüsselung von sensiblen Daten

2. Was befindet sich im TCP-Header?
a) Physikalische Adresse
b) IP-Adresse und Time to Live
c) Portnummer und Offset
d) Welches Dokument wird angefordert

3. Warum ist die "Fenstergröße" wichtig für das reibungslose Funktionieren des Netzwerks?
a) Weil zu große Pakete die Glasfaserverbindungen verstopfen
b) Es verhindert, dass ein schneller Computer zu viele Daten über eine langsame Verbindung sendet
c) Es begrenzt die Anzahl der Sprünge, die ein Paket machen kann, bevor es verworfen wird
d) Es bestimmt, welcher Teil einer IP-Adresse die Netzwerknummer ist

4. Was passiert, wenn ein sendender Computer eine Bestätigung vom empfangenden Computer erhält?
a) Der sendende Computer sendet die Daten erneut, um sicherzustellen, dass sie korrekt übertragen wurden
b) Der sendende Computer sendet weitere Daten bis zur Fenstergröße
c) Der sendende Computer sendet eine "Quittung für die Quittung"
d) Der sendende Computer sendet die Quittung an die Internetkarte (IMAP)

5. Welche dieser Funktionen erkennt und ergreift Maßnahmen, wenn Pakete verloren gehen?
a) Sendender Computer
b) Netzwerk-Gateway
c) Kern-Internet-Router
d) Empfangender Computer

6. Welches dieser Geräte speichert Datenpakete, damit sie bei einem Paketverlust erneut gesendet werden können?
a) Sendender Computer
b) Netzwerk-Gateway
c) Kern-Internet-Router
d) Empfangender Computer

7. Welcher der folgenden Ports ist einem TCP-Port am ähnlichsten?
a) Bahnhof
b) Unterwasser-Netzwerkkabel
c) Wohnungsnummer
d) Skulpturengarten

8. Welche Hälfte der Client/Server-Anwendung muss zuerst starten?
a) Client
b) Server

9. Wie lautet die Portnummer für das Domain Name System?
a) 22
b) 80
c) 53
d) 143

10. Wie lautet die Portnummer für das IMAP-Mailabrufprotokoll?
a) 22
b) 80
c) 53
d) 143




