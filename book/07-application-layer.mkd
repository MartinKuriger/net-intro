Anwendungsschicht
=================

\index{Anwendungsschicht}
\index{Schicht!Anwendung}
Wir haben uns in unserem vierschichtigen TCP/IP-Netzwerkmodell von unten nach oben vorgearbeitet und sind nun endlich an der Spitze angekommen.  Die Anwendungsschicht ist der Ort, an dem die vernetzte Software wie Webbrowser, Mailprogramme, Videoplayer oder vernetzte Videoplayer arbeiten. Wir als Benutzer interagieren mit diesen Anwendungen und die Anwendungen interagieren in unserem Namen mit dem Netzwerk.

![Die Anwendungsschicht](../images/layers-application)

Client- und Server-Anwendungen
------------------------------

Es ist wichtig, sich daran zu erinnern, dass für das Funktionieren einer vernetzten Anwendung zwei Teile erforderlich sind. Die Architektur für eine vernetzte Anwendung wird als "Client/Server" bezeichnet. Der Serverteil der Anwendung läuft irgendwo im Internet und verfügt über die Informationen, die die Benutzer anzeigen oder mit denen sie interagieren möchten. Der Client-Teil der Anwendung stellt Verbindungen zur Server-Anwendung her, ruft Informationen ab und zeigt sie dem Benutzer an. Diese Anwendungen verwenden die Transportschicht auf jedem ihrer Computer, um Daten auszutauschen.

![Client/Server-Anwendungen](../sketchnote/Client_Server)

Um eine Webadresse wie www.khanacademy.org zu durchsuchen, müssen Sie eine Webanwendung auf Ihrem Computer laufen haben. Wenn Sie eine Adresse in Ihren Webbrowser eingeben, stellt dieser eine Verbindung zum entsprechenden Webserver her, ruft Seiten ab, die Sie sich ansehen können, und zeigt Ihnen dann die Seiten an.

Der Webbrowser auf Ihrem Computer sendet eine Anfrage zur Verbindung mit www.khanacademy.org. Ihr Computer sucht im Domänennamen nach der entsprechenden IP-Adresse des Servers, stellt eine Transportverbindung zu dieser IP-Adresse her und beginnt dann, über diese Netzwerkverbindung Daten vom Server anzufordern. Wenn die Daten empfangen werden, zeigt der Webbrowser sie Ihnen an. Manchmal zeigen Webbrowser ein kleines animiertes Symbol an, um Sie wissen zu lassen, dass die Daten über das Netzwerk abgerufen werden.

Am anderen Ende der Verbindung befindet sich eine weitere Anwendung, die als
"Webserver". Das Webserver-Programm ist immer in Betrieb und wartet auf eingehende Verbindungen. Wenn Sie also eine Webseite aufrufen möchten, stellen Sie eine Verbindung zu einer Serveranwendung her, die bereits läuft und auf Ihre Verbindung wartet.

In gewissem Sinne sind die Schichten Transport, Internetwork und Link zusammen mit dem Domain Name System wie ein Telefonnetz für vernetzte Anwendungen. Sie "wählen" verschiedene Serveranwendungen im Netzwerk an und führen "Gespräche" mit diesen
mit diesen Anwendungen, um Daten auszutauschen.

Protokolle der Anwendungsschicht
---------------------------

\index{client}
\index{server}
Genau wie Menschen, die sich am Telefon unterhalten, braucht jedes Paar von Netzwerkanwendungen einen Satz von Regeln, die das Gespräch regeln. In den meisten Kulturen sagt man "Hallo", wenn das Telefon klingelt und man den Hörer abnimmt. Normalerweise schweigt die Person, die den Anruf getätigt hat (die Client-Person), bis die Person, die den Hörer abnimmt (die Server-Person) "Hallo" sagt. Wenn Sie jemals jemanden angerufen haben, der sich nicht an diese einfache Regel hält, kann das ziemlich verwirrend sein. Sie würden wahrscheinlich annehmen, dass die Verbindung nicht funktioniert, auflegen und den Anruf erneut versuchen.

\index{Protokoll}
Ein Satz von Regeln, die regeln, wie wir kommunizieren, wird als "Protokoll" bezeichnet. Die Definition des Wortes Protokoll ist "eine Regel, die beschreibt, wie eine Aktivität ausgeführt werden sollte, insbesondere im Bereich der Diplomatie." Die Idee ist, dass wir uns in formalen Situationen nach einem genauen Satz von Regeln verhalten sollten. Wir verwenden dieses Wort, um vernetzte Anwendungen zu beschreiben, denn ohne präzise Regeln haben Anwendungen keine Möglichkeit, eine Konversation aufzubauen und zu verwalten. Computer mögen Präzision.

![Anwendungsprotokolle](../sketchnote/Protocols)

\index{RFC-7230 HTTP}
Es gibt viele verschiedene vernetzte Anwendungen und es ist wichtig, dass jede vernetzte Anwendung über ein gut dokumentiertes Protokoll verfügt, damit alle Server und Clients zusammenarbeiten können. Einige dieser Protokolle sind sehr kompliziert und komplex.

Das Protokoll, das beschreibt, wie ein Webbrowser mit einem Webserver kommuniziert, wird in einer Reihe von umfangreichen Dokumenten beschrieben, angefangen mit diesem hier:

[https://tools.ietf.org/html/rfc7230](../https://tools.ietf.org/html/rfc7230)

\index{HyperText Transport Protocol}
\index{HTTP}
Der formale Name des Protokolls zwischen Web-Clients und Web-Servern ist das
"HyperText Transport Protocol", oder kurz HTTP. Wenn Sie "http:" oder
"https:" an den Anfang einer URL setzen, die Sie in den Browser eingeben, geben Sie damit an, dass Sie ein Dokument über das HTTP-Protokoll abrufen möchten.

Wenn Sie das obige Dokument lesen und zu Abschnitt 5.3.2 auf Seite 41 gehen, finden Sie den genauen Text dessen, was ein Web-Client an einen Webserver senden soll:

    GET http://www.example.org/pub/WWW/TheProject.html HTTP/1.1

Einer der Gründe, warum HTTP so erfolgreich ist, ist, dass es im Vergleich zu den meisten Client/Server-Protokollen relativ einfach ist. Auch wenn die grundlegende Verwendung von HTTP relativ einfach ist, gibt es eine Menge Details, die es Web-Clients und Servern ermöglichen, effizient zu kommunizieren und eine Vielzahl von Informationen und Daten zu übertragen. Sechs verschiedene Dokumente beschreiben das HTTP-Protokoll auf insgesamt 305
Seiten. Das mag wie eine Menge Details erscheinen, aber der Schlüssel beim Entwurf von Protokollen ist es, alle möglichen Anwendungen des Protokolls durchzudenken und jedes Szenario sorgfältig zu beschreiben.

Erforschung des HTTP-Protokolls
---------------------------

In diesem Abschnitt werden wir das HTTP-Protokoll manuell üben, indem wir vorgeben, ein Webbrowser zu sein und HTTP-Befehle an einen Webserver zu senden, um Daten abzurufen. Um mit dem HTTP-Protokoll zu spielen, werden wir eine der frühesten Internet-Anwendungen verwenden, die jemals gebaut wurden.

\index{RFC-15 Telnet}
\index{telnet}
Die Anwendung "telnet" wurde erstmals 1968 entwickelt, und zwar nach einem der frühesten Standards für das Internet:

[https://tools.ietf.org/html/rfc15](../https://tools.ietf.org/html/rfc15)

\index{ARPANET}
\index{NSFNet}
Dieser Standard ist nur fünf Seiten lang, und an dieser Stelle können Sie wahrscheinlich das meiste, was in dem Dokument steht, leicht lesen und verstehen. Die Telnet-Client-Anwendung ist so alt, dass sie praktisch ein Dinosaurier ist, denn sie stammt aus
"prähistorischen" Zeiten in Bezug auf das Zeitalter des Internets stammt. Das Internet wurde 1985 durch das NSFNet-Projekt geschaffen und der Vorläufer des NSFNet, das ARPANET, wurde 1969 ins Leben gerufen. Telnet wurde entwickelt und gebaut, noch bevor das erste TCP/IP-Netzwerk in Produktion war.

Interessanterweise ist die Telnet-Anwendung immer noch in den meisten modernen Betriebssystemen vorhanden. In Macintosh und Linux können Sie telnet über das Terminal (Kommandozeile) aufrufen. Die telnet-Anwendung war auch in Windows 95 bis Windows XP vorhanden, ist aber in späteren Versionen von Windows nicht mehr enthalten. Wenn Sie eine neuere Version von Windows haben, können Sie einen Telnet-Client herunterladen und installieren, um die Beispiele in diesem Abschnitt auszuführen.

Telnet ist eine einfache Anwendung.  Führen Sie telnet über die Befehlszeile (oder das Terminal) aus und geben Sie den folgenden Befehl ein:

    telnet www.dr-chuck.com 80

\index{TCP-Ports}
\index{port 80}
Der erste Parameter ist ein Domain-Name (eine IP-Adresse würde hier auch funktionieren)
und ein Port, zu dem eine Verbindung auf diesem Host hergestellt werden soll. Mit dem Port geben wir an, mit welchem Anwendungsserver wir uns verbinden möchten. An Port 80 erwarten wir normalerweise eine HTTP (Web)-Server-Anwendung auf einem Host. Wenn es keinen Webserver gibt, der auf Port 80 lauscht, wird unsere Verbindung eine Zeitüberschreitung aufweisen und fehlschlagen. Wenn jedoch ein Webserver vorhanden ist, werden wir mit diesem Webserver verbunden und alles, was wir auf unserer Tastatur eingeben, wird direkt an den Server gesendet. An diesem Punkt müssen wir das HTTP-Protokoll kennen und die Befehle genau wie erwartet eingeben. Wenn wir das Protokoll nicht kennen, wird der Webserver nicht allzu freundlich sein. Hier ist ein Beispiel, bei dem die Dinge nicht gut laufen:

    telnet www.dr-chuck.com 80
    Versucht 198.251.66.43...
    Verbunden mit www.dr-chuck.com.
    Escape-Zeichen ist '^]'.
    HELP
    <!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML 2.0//DE">
    <html><head>
    <title>501 Methode nicht implementiert</title>
    ...
    </body></html>
    Verbindung vom fremden Host geschlossen.

Wir geben "telnet" in das Terminal ein und fordern eine Verbindung zu Port 80
(dem Webserver) auf dem Host www.dr-chuck.com.  Sie können sehen, wie unsere Transportschicht den Domainnamen nachschlägt und feststellt, dass die tatsächliche Adresse
"198.251.66.43" ist, und stellt dann eine erfolgreiche Verbindung zu diesem Server her. Sobald wir verbunden sind, wartet der Server darauf, dass wir einen Befehl eingeben, gefolgt von der Enter- oder Return-Taste. Da wir das Protokoll nicht kennen, geben wir
"HELP" ein und drücken die Eingabetaste. Der Server ist nicht erfreut, gibt uns eine Fehlermeldung und schließt dann die Verbindung. Wir bekommen keine zweite Chance. Wenn wir das Protokoll nicht kennen, will der Webserver nicht mit uns reden.

\index{Hacking HTTP}
Aber gehen wir zurück und lesen wir Abschnitt 5.3.2 des RFC-7230-Dokuments und versuchen wir erneut, ein Dokument mit der richtigen Syntax anzufordern:

    telnet www.dr-chuck.com 80
    Versucht 198.251.66.43...
    Verbunden mit www.dr-chuck.com.
    Escape-Zeichen ist '^]'.
    GET http://www.dr-chuck.com/page1.htm HTTP/1.0

    HTTP/1.1 200 OK
    Last-Modified: Sun, 19 Jan 2014 14:25:43 GMT
    Inhalt-Länge: 131
    Inhalt-Typ: text/html

    <h1>Die erste Seite</h1>
    <p>
    Wenn Sie möchten, können Sie auf die
    <a href="http://www.dr-chuck.com/page2.htm">
    Zweite Seite</a>.
    </p>
    Die Verbindung wird vom fremden Host geschlossen.

Wir stellen die Verbindung zum Webbrowser wieder über Telnet her, dann senden wir einen GET-Befehl, der angibt, welches Dokument wir abrufen wollen. Wir verwenden die Version 1.0 des HTTP-Protokolls, weil sie einfacher ist als HTTP 1.1. Dann senden wir eine Leerzeile, indem wir "Return" oder "Enter" drücken, um anzuzeigen, dass wir mit unserer Anfrage fertig sind.

![HTTP von Hand hacken](../sketchnote/Hacking_HTTP)

\index{HTML}
\index{HyperText Markup Language}
Da wir die richtige Anfrage gesendet haben, antwortet der Host mit einer Reihe von Headern, die das Dokument beschreiben, gefolgt von einer Leerzeile, dann sendet er das eigentliche Dokument.  

\index{HTTP status code!200}
\index{HTTP status code!301}
\index{HTTP status code!404}
Die Kopfzeilen übermitteln Metadaten (Daten über Daten) über das Dokument, das wir abrufen wollen. Zum Beispiel enthält die erste Zeile einen Statuscode.

In diesem Beispiel bedeutet der Statuscode von "200", dass alles gut gelaufen ist. Ein Statuscode von "404" in der ersten Zeile der Kopfzeile bedeutet, dass das angeforderte 
Dokument nicht gefunden wurde. Ein Statuscode von "301" zeigt an, dass das Dokument an einen neuen Ort verschoben wurde.

Die Statuscodes für HTTP sind in Bereiche gruppiert: 
2XX-Codes zeigen Erfolg an, 3XX-Codes sind für die Weiterleitung, 
4XX-Codes zeigen an, dass die Client-Anwendung etwas falsch gemacht hat, und 5xx-Codes zeigen an, dass der Server etwas falsch gemacht hat.

Dies ist ein HyperText Markup Language (HTML)-Dokument, also ist es mit Tags wie \<h1\> und \<p\> gekennzeichnet. Wenn Ihr Browser das Dokument im HTML-Format empfängt, sieht er sich die Markierung im Dokument an, interpretiert sie und präsentiert Ihnen eine formatierte Version des Dokuments.

Das IMAP-Protokoll zum Abrufen von E-Mails
-------------------------------------

Das HTTP-Protokoll ist nur eines von vielen im Internet verwendeten Client/Server-Anwendungsprotokollen. Ein anderes gängiges Protokoll wird verwendet, damit eine Mail-Anwendung, die auf Ihrem Computer läuft, Mails von einem zentralen Server abrufen kann. Da Ihr persönlicher Computer möglicherweise nicht immer eingeschaltet ist, wird die an Sie gesendete E-Mail an einen Server gesendet und auf diesem gespeichert, bis Sie Ihren Computer einschalten und neue E-Mails abrufen.

\index{RFC-3501 IMAP}
\index{mail protocol}
\index{IMAP}
Wie viele Anwendungsstandards wird auch das Internet Message Access Protocol (IMAP) in einer Reihe von Request For Comment (RFC)-Dokumenten beschrieben, die mit diesem RFC beginnen:

    https://tools.ietf.org/html/rfc3501

IMAP ist ein komplizierteres Protokoll als das Web-Protokoll, daher können wir den telnet-Befehl nicht zum Vortäuschen des Protokolls verwenden. Aber wenn Sie eine Anwendung zum Lesen von E-Mails entwickeln würden, könnten Sie dieses Dokument sorgfältig lesen und Code entwickeln, um eine erfolgreiche Konversation mit einem standardkonformen IMAP-Server zu führen. Hier ist ein einfaches Beispiel aus Abschnitt 6.3.1 des obigen Dokuments, das zeigt, was der Client (C:) sendet und wie der Server (S:) antwortet:

    C: A142 POSTEINGANG AUSWÄHLEN
    S: * 172 EXISTS
    S: * 1 RECENT
    S: * OK [UNSEEN 12] Meldung 12 ist zuerst ungesehen
    S: * OK [UIDVALIDITY 3857529045] UIDs gültig
    S: * OK [UIDNEXT 4392] Vorausgesagte nächste UID
    S: * FLAGS (\Answered \Flagged \Deleted \Seen \Draft)
    S: * OK [PERMANENTFLAGS (\Löschte \Gesehen \*)] Begrenzt
    S: A142 OK [READ-WRITE] SELECT abgeschlossen

Die Nachrichten, die von Client und Server gesendet werden, sind nicht dafür gedacht, von einem Endbenutzer angesehen zu werden, daher sind sie nicht besonders aussagekräftig. Diese Nachrichten sind genau formatiert und werden in einer präzisen Reihenfolge gesendet, damit sie von vernetzten Computeranwendungen an beiden Enden der Verbindung erzeugt und gelesen werden können.

Flusssteuerung
------------

\index{Flusssteuerung}
\index{Fenstergröße}
Bei der Betrachtung der Transportschicht haben wir über die "Fenstergröße" gesprochen, d. h. über die Datenmenge, die die Transportschicht auf dem sendenden Computer sendet, bevor sie eine Pause einlegt, um auf eine Quittung zu warten.

![Pufferung in der Transportschicht](../images/transport-buffer)

In dieser Abbildung sehen wir eine in Pakete aufgeteilte Nachricht, wobei einige der 
Pakete gesendet und quittiert wurden. Sechs Pakete wurden gesendet, aber noch nicht bestätigt, und die sendende Transportschicht hat die Grenze des Sendefensters erreicht, so dass sie eine Pause einlegt, bis sie eine Bestätigung von der Transportschicht des empfangenden Computers erhält. Der empfangende Computer hat drei Pakete empfangen, von denen eines nicht in Ordnung ist.

Als wir dieses Beispiel zuvor aus der Sicht der Transportschicht betrachtet haben, haben wir ignoriert, woher die zu sendenden Pakete kommen und wohin die Pakete im empfangenden Computer gehen. Jetzt, da wir die Anwendungsschicht betrachten, können wir die beiden Anwendungen hinzufügen, die die Quelle und das Ziel des Datenstroms sind.

Nehmen wir an, der Webbrowser hat eine Transportverbindung zum Webserver hergestellt und mit dem Herunterladen einer Bilddatei begonnen. Der Webserver hat die Bilddatei geöffnet und sendet die Daten aus der Datei so schnell wie möglich an seine Transportschicht. Die Transportschicht muss sich jedoch an die Regeln der Fenstergröße halten und kann daher nur eine bestimmte Datenmenge auf einmal senden. Wenn sich das Fenster füllt, wird der Webserver angehalten, bis die Transportschicht auf dem Zielcomputer damit begonnen hat, Pakete zu empfangen und zu bestätigen.

Wenn die Transportschicht auf dem Zielcomputer beginnt, Pakete zu empfangen, den Datenstrom zu rekonstruieren und Pakete zu bestätigen, liefert sie den rekonstruierten Paketstrom an die Webbrowser-Anwendung, die auf dem Bildschirm des Benutzers angezeigt wird. Manchmal können Sie bei einer langsamen Verbindung sehen, wie der Browser
Bilder "malt", während die Daten heruntergeladen werden. Bei einer schnellen Verbindung kommen die Daten so schnell, dass die Bilder augenblicklich erscheinen.

Wenn wir unser Bild der Pakete in der Transportebene neu zeichnen und die beiden Anwendungsebenen hinzufügen, in denen sich die Pakete in der Mitte eines Bildes befinden, sieht es jetzt so aus:

![Pufferung in der Anwendungs- und Transportschicht](../images/application-transport-buffer)

Der Webserver liest die Bilddatei ('F') und sendet sie als Stream an den Webbrowser, so schnell wie er die Daten senden kann.  Die Quell-Transportschicht hat den Datenstrom in Pakete zerlegt und die Pakete über IP an den Zielcomputer gesendet. 

Die Transportschicht hat sechs Pakete ("S") gesendet und hat das Senden gestoppt, weil sie ihre Fenstergröße erreicht und den Webserver angehalten hat. Drei dieser sechs Pakete haben es zur Transportschicht auf dem Zielcomputer geschafft ("R") und drei der Pakete sind noch auf dem Weg durch das Internet ("S"). 

Während die Ziel-Transportschicht den Datenstrom wieder zusammensetzt, sendet sie sowohl eine Bestätigung (ACK) als auch die Daten an die empfangende Anwendung (den Webbrowser). Der Webbrowser rekonstruiert das Bild ("A") und zeigt es dem Benutzer an, während die Daten empfangen werden.

Ein wichtiger Punkt in diesem Bild ist, dass die Transportschichten die Pakete nicht für die gesamte Datei aufbewahren. Sie bewahren nur die Pakete auf, die "auf dem Weg" sind
und unquittiert sind. Sobald die Pakete bestätigt und an die Zielanwendung geliefert wurden, gibt es weder für die Quell- noch für die Ziel-Transportschicht einen Grund, die Pakete aufzubewahren.

Wenn die Bestätigung vom Zielcomputer zum Quellcomputer zurückfließt, hebt die Transportschicht auf dem Quellcomputer die Pause der Webserver-Anwendung auf, und der Webserver fährt fort, Daten aus der Datei zu lesen und sie zur Übertragung an die Quell-Transportschicht zu senden.

Diese Fähigkeit, die sendende Anwendung zu starten und zu stoppen, um sicherzustellen, dass die Daten so schnell wie möglich gesendet werden, ohne dass die Daten so schnell gesendet werden, dass sie das Internet verstopfen, wird "Flusskontrolle" genannt. Die Anwendungen sind nicht für die Flusskontrolle verantwortlich, sie versuchen nur, Daten so schnell wie möglich zu senden oder zu empfangen, und die beiden Transportschichten starten und stoppen die Anwendungen je nach Geschwindigkeit und Zuverlässigkeit des Netzwerks.

Schreiben von vernetzten Anwendungen
------------------------------

\index{socket}
Die Anwendungen, die Daten über das Netzwerk senden und empfangen, werden in einer oder mehreren Programmiersprachen geschrieben.   Viele Programmiersprachen verfügen über Codebibliotheken, die es recht einfach machen, Anwendungscode zum Senden und Empfangen von Daten über das Netzwerk zu schreiben. Mit einer guten Programmierbibliothek ist das Herstellen einer Verbindung zu einer Anwendung, die auf einem Server läuft, das Senden von Daten an den Server und das Empfangen von Daten vom Server im Allgemeinen so einfach wie das Lesen und Schreiben einer Datei.

\index{Programmierung von Sockets}
Als Beispiel genügt der folgende Code in der Programmiersprache Python, um eine Verbindung zu einem Webserver herzustellen und ein Dokument abzurufen:

![Programmieren mit Sockets in Python](../images/python-socket)

Ob Sie nun die Programmiersprache Python kennen oder nicht, entscheidend ist, dass es nur zehn Zeilen Anwendungscode braucht, um eine Netzwerkverbindung herzustellen und zu nutzen. Dieser Code ist einfach, weil die Transport-, Internetwork- und Link-Schichten die Probleme auf jeder ihrer Schichten so effektiv lösen, dass Anwendungen, die das Netzwerk nutzen, fast alle Details der Netzwerkimplementierung ignorieren können.

In der Python-Anwendung, in dieser Codezeile

    mysock.connect(('www.py4inf.com', 80))

haben wir angegeben, dass wir uns mit der Anwendung verbinden, die auf dem entfernten Computer www.py4inf.com auf eingehende Verbindungen an Port 80 wartet.

Durch die Wahl von Port 80 geben wir an, dass wir eine Verbindung zu einem World Wide Web-Server auf diesem Host herstellen wollen und erwarten, dass wir mit diesem Server über das HyperText Transport Protocol kommunizieren.

Zusammenfassung
-------

Der gesamte Zweck der unteren drei Schichten (Transport, Internetwork und Link) besteht darin, dass sich Anwendungen, die in der Anwendungsschicht laufen, auf das zu lösende Anwendungsproblem konzentrieren können und praktisch die gesamte Komplexität der Datenübertragung über ein Netzwerk den unteren Schichten des Netzwerkmodells überlassen.

Da es mit diesem Ansatz so einfach ist, vernetzte Anwendungen zu erstellen, haben wir eine breite Palette von vernetzten Anwendungen gesehen, darunter Webbrowser, Mail-Anwendungen, vernetzte Videospiele, netzwerkbasierte Telefonie-Anwendungen und viele andere. Und was noch viel spannender ist, ist, dass es einfach ist, zu experimentieren und ganz neue Arten von vernetzten Anwendungen zu bauen, um Probleme zu lösen, die man sich bisher nicht vorstellen konnte.

Glossar
--------

**HTML**: HyperText Markup Language.  Ein Textformat, das Text mit Hilfe von 
Text mit Tags auszeichnet, die von Kleiner-als- und Größer-als-Zeichen umgeben sind. Ein Beispiel für HTML sieht so aus: \<p\>Das ist \<strong\>schön\</strong\>\</p\>.

**HTTP**: HyperText Transport Protocol.  Ein Protokoll der Anwendungsschicht, das es Web-Browsern ermöglicht, Web-Dokumente von Web-Servern abzurufen.

**IMAP**: Internet Message Access Protocol.  Ein Protokoll, das es Mail-Clients ermöglicht, sich bei IMAP-fähigen Mail-Servern anzumelden und Mails von diesen abzurufen.

**Flusskontrolle**: Wenn ein sendender Computer langsamer wird, um sicherzustellen, dass er weder das Netzwerk noch den Zielcomputer überlastet. Die Flusssteuerung veranlasst den sendenden Computer auch, die Geschwindigkeit zu erhöhen, mit der Daten gesendet werden, wenn er sicher ist, dass das Netzwerk und der Zielcomputer die höheren Datenraten verarbeiten können.

**Socket**: Eine in vielen Programmiersprachen verfügbare Softwarebibliothek, die das Herstellen einer Netzwerkverbindung und den Datenaustausch fast so einfach macht wie das Öffnen und Lesen einer Datei auf dem Computer.

**Statuscode**: Ein Aspekt des HTTP-Protokolls, der den allgemeinen 
Erfolg oder Misserfolg einer Anfrage nach einem Dokument anzeigt. Der bekannteste HTTP-Statuscode ist "404", womit ein HTTP-Server einem 
HTTP-Server einem HTTP-Client (d.h. einem Browser) mitteilt, dass das angeforderte Dokument 
nicht gefunden werden konnte.

**telnet**: Eine einfache Client-Anwendung, die TCP-Verbindungen zu verschiedenen Adress-/Port-Kombinationen herstellt und es ermöglicht, getippte Daten über die Verbindung zu senden.  In den Anfängen des Internets wurde Telnet verwendet, um sich aus der Ferne über das Netzwerk bei einem Computer anzumelden.

**Webbrowser**: Eine Client-Anwendung, die Sie auf Ihrem Computer ausführen, um Webseiten abzurufen und anzuzeigen.

**Web-Server**: Eine Anwendung, die Web-Seiten ausliefert (serviert).



Fragen
---------

Sie können dieses Quiz online unter http://www.net-intro.com/quiz/ bearbeiten.

1. Welche Schicht befindet sich direkt unter der Anwendungsschicht?
a) Transport
b) Internetworking
c) Verbindungsschicht
d) Obere Schicht

2. Welche Art von Dokument wird verwendet, um weit verbreitete Protokolle der Anwendungsschicht zu beschreiben?
a) DHCP
b) RFC
c) APPDOC
d) ISO 9000

3. Welcher dieser Begriffe ist eine Idee, die in der Anwendungsschicht erfunden wurde?
a) 0f:2a:b3:1f:b3:1a
b) 192.168.3.14
c) www.khanacademy.com
d) http://www.dr-chuck.com/

4. Welcher der folgenden Punkte ist *nicht* etwas, um das sich die Anwendungsschicht kümmert?
a) Ob der Client oder der Server zuerst zu sprechen beginnt
b) Das Format der Befehle und Antworten, die über einen Socket ausgetauscht werden
c) Wie sich die Fenstergröße ändert, wenn Daten über einen Socket gesendet werden
d) Wie die Daten dargestellt werden, wenn sie über das Netzwerk gesendet werden, um 
Interoperabilität zu gewährleisten.

5. Welches der folgenden Protokolle ist ein Protokoll der Anwendungsschicht?
a) HTTP
b) TCP
c) DHCP
d) Ethernet

6. Welcher Port wird normalerweise für die Kommunikation mit einem Webserver verwendet?
a) 23
b) 80
c) 103
d) 143

7. Wie lautet der Befehl, den ein Webbrowser an einen Webserver sendet, um ein Webdokument abzurufen?
a) RETR
b) DOKUMENT
c) 404
d) GET

8. Was ist der Zweck des "Content-type:"-Headers, wenn Sie ein Dokument über das Web-Protokoll abrufen?
a) Er teilt dem Browser mit, wie das abgerufene Dokument angezeigt werden soll
b) Sagt dem Browser, wohin er gehen soll, wenn das Dokument nicht gefunden werden kann
c) Teilt dem Browser mit, ob das abgerufene Dokument leer ist oder nicht
c) Teilt dem Browser mit, wo die Kopfzeilen enden und der Inhalt beginnt

9. Welcher gängige UNIX-Befehl kann verwendet werden, um einfache Befehle an 
einen Webserver zu senden?
a) ftp
b) ping
c) traceroute
d) telnet

10. Was bedeutet ein HTTP-Statuscode von "404"?
a) Dokument wurde verschoben
b) Dokument wurde erfolgreich abgerufen
c) Protokollfehler
d) Dokument nicht gefunden

11. Welche Zeichen werden zur Kennzeichnung von HTML-Dokumenten verwendet?
a) Kleiner-als und größer-als Zeichen < > 
b) Ausrufezeichen ! 
c) Eckige Klammern [ ]
d) Geschweifte Klammern { }

12. Was ist ein gängiges Anwendungsprotokoll zum Abrufen von Mails?
a) RFC
b) HTML
c) ICANN
d) IMAP

13. Welches Anwendungsprotokoll wird in RFC15 beschrieben?
a) telnet
b) ping
c) traceroute
d) www

14. Was passiert mit einer Serveranwendung, die eine große Datei sendet, wenn die TCP-Schicht genug Daten gesendet hat, um die Fenstergröße zu füllen, und noch keine Bestätigung erhalten hat?
a) Die Anwendung schaltet ihre Übertragung auf einen neuen Socket um
b) Die Anwendung stürzt ab und muss neu gestartet werden
c) Die Anwendung wird angehalten, bis der entfernte Rechner bestätigt, dass er einen Teil der Daten erhalten hat
d) Der nächstgelegene Gateway-Router beginnt, Pakete zu verwerfen, die 
die Fenstergröße überschreiten würden

15. Was ist ein "Socket" im Internet?
a) Eine Möglichkeit für Geräte, drahtlos Strom zu erhalten
b) Eine Möglichkeit für Geräte, eine IP-Adresse zu erhalten
c) Ein Eintrag in einer Routing-Tabelle
d) Eine bidirektionale Datenverbindung zwischen einem Paar von Client- und Server-Anwendungen

16. Was muss eine Anwendung wissen, um eine Socket-Verbindung in Software herzustellen?
a) Die Adresse des Servers und die Portnummer des Servers
b) Die Route zwischen dem Quell- und dem Zielcomputer
c) Welcher Teil der IP-Adresse ist die Netzwerknummer
d) Die Anfangsgröße des TCP-Fensters bei der Übertragung




